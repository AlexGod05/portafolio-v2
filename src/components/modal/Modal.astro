---
interface Props {
  id: string;
  title: string;
  subtitle?: string;
}

const { id, title, subtitle } = Astro.props;
---

<div id={id} class="modal" role="dialog" aria-modal="true">
  <div class="modal-content">
    <div class="modal-header">
      <div class="left-controls">
        <button class="nav-arrow prev-modal" aria-label="Anterior modal">
          <i class="fas fa-chevron-left"></i>
        </button>
      </div>
      <h2>{title}</h2>
      <div class="right-controls">
        <button class="nav-arrow next-modal" aria-label="Siguiente modal">
          <i class="fas fa-chevron-right"></i>
        </button>
        <button class="close-modal" aria-label="Cerrar modal">
          <i class="fas fa-times"></i>
        </button>
      </div>
    </div>
    {subtitle && <div class="modal-subtitle">{subtitle}</div>}
    <div class="modal-body">
      <slot />
    </div>
    <div class="modal-footer">
      <button class="close-modal-button">
        Cerrar
      </button>
    </div>
  </div>
</div>

<script>
  function initModal(modalId: string) {
    const modal = document.getElementById(modalId);
    if (!modal) return;

    const closeBtn = modal.querySelector('.close-modal');
    const closeModalBtn = modal.querySelector('.close-modal-button');
    const prevBtn = modal.querySelector('.prev-modal');
    const nextBtn = modal.querySelector('.next-modal');
    
    if (!closeBtn) return;

    // Función para abrir la modal
    function openModal() {
      if (!modal) return;
      modal.classList.add('active');
      document.body.style.overflow = 'hidden';
    }

    // Función para cerrar la modal
    function closeModal() {
      if (!modal) return;
      modal.classList.remove('active');
      document.body.style.overflow = '';
    }

    // Navegación entre modales
    function navigateModals(direction: 'prev' | 'next') {
      const companyCards = Array.from(document.querySelectorAll('.company-card'));
      if (!companyCards.length) return;
      
      // Obtener el nombre de la empresa actual 
      const currentCompany = modal.querySelector('.modal-header h2')?.textContent?.trim() || '';
      
      // Encontrar el índice de la tarjeta actual
      const currentIndex = companyCards.findIndex(
        card => card.getAttribute('data-company')?.trim() === currentCompany
      );
      
      if (currentIndex === -1) return;
      
      // Calcular el nuevo índice
      let newIndex;
      if (direction === 'next') {
        newIndex = (currentIndex + 1) % companyCards.length;
      } else {
        newIndex = (currentIndex - 1 + companyCards.length) % companyCards.length;
      }
      
      // Simular clic en la nueva tarjeta
      const newCard = companyCards[newIndex] as HTMLElement;
      if (newCard) {
        closeModal();
        setTimeout(() => {
          newCard.click();
        }, 300); // Delay después de cerrar la modal
      }
    }

    // Event listeners para botones de navegación
    if (prevBtn) {
      prevBtn.addEventListener('click', () => navigateModals('prev'));
    }
    
    if (nextBtn) {
      nextBtn.addEventListener('click', () => navigateModals('next'));
    }

    // Event listeners para cerrar modal
    closeBtn.addEventListener('click', closeModal);
    if (closeModalBtn) {
      closeModalBtn.addEventListener('click', closeModal);
    }
    
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        closeModal();
      }
    });

    // Keyboard navigation
    modal.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowLeft') {
        navigateModals('prev');
      } else if (e.key === 'ArrowRight') {
        navigateModals('next');
      } else if (e.key === 'Escape') {
        closeModal();
      }
    });

    // Cuando se abre el modal, asignar focus para permitir navegación con teclado
    function handleModalActive() {
      if (modal.classList.contains('active')) {
        modal.setAttribute('tabindex', '0');
        modal.focus();
      } else {
        modal.removeAttribute('tabindex');
      }
    }

    // Observar cambios en la clase active
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.attributeName === 'class') {
          handleModalActive();
        }
      });
    });

    observer.observe(modal, { attributes: true });

    // Exponer funciones públicamente
    Object.assign(modal, { openModal, closeModal, navigateModals });
  }

  // Inicializar todos los modales al cargar la página
  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.modal').forEach(modal => {
      if (modal.id) {
        initModal(modal.id);
      }
    });
  });
</script> 