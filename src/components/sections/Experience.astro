---
import Section from "../Section.astro"
import { getCVData } from "@cv"

const cvData = await getCVData()
const { work } = cvData

// Agrupar experiencias por empresa
const groupedWork = work.reduce((acc, experience) => {
  const companyName = experience.name.split(' - ')[0]
  if (!acc[companyName]) {
    acc[companyName] = []
  }
  acc[companyName].push(experience)
  return acc
}, {} as Record<string, typeof work>)

// Convertir groupedWork a JSON para el script
const groupedWorkJson = JSON.stringify(groupedWork)
---

<Section>
  <div class="accordion-container">
    <button class="accordion-header" aria-expanded="false">
      <h2><i class="fas fa-briefcase"></i> Experiencia laboral</h2>
      <span class="accordion-icon">▼</span>
    </button>

    <div class="accordion-content" aria-hidden="true">
      <div class="companies-grid">
        {
          Object.entries(groupedWork).map(([company, experiences]) => {
            const firstExperience = experiences[0]
            const lastExperience = experiences[experiences.length - 1]
            const startYear = new Date(firstExperience.startDate).getFullYear()
            const endYear = lastExperience.endDate 
              ? new Date(lastExperience.endDate).getFullYear() 
              : "Actual"
            const years = `${startYear} - ${endYear}`

            return (
              <div class="company-card" data-company={company}>
                <div class="company-card-content">
                  <div class="company-header">
                    <h3>{company}</h3>
                    <time>{years}</time>
                  </div>
                  <div class="company-indicator">
                    <i class="fas fa-info-circle"></i>
                    <span>Ver experiencia</span>
                  </div>
                </div>
              </div>
            )
          })
        }
      </div>
    </div>
  </div>
</Section>

<!-- Modal template -->
<template id="company-modal-template">
  <div class="modal" role="dialog" aria-modal="true">
    <div class="modal-content">
      <button class="close-modal" aria-label="Cerrar modal">×</button>
      <div class="modal-header">
        <h2 class="company-name"></h2>
        <time class="company-period"></time>
      </div>
      <div class="modal-body">
        <div class="experiences-list"></div>
      </div>
    </div>
  </div>
</template>

<style>
  .accordion-container {
    width: 100%;
  }

  .companies-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 1rem;
    padding: 1rem;
  }

  .company-card {
    background: var(--card-bg, #ffffff);
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
    cursor: pointer;
    border: 1px solid var(--border);
    position: relative;
    overflow: hidden;
  }

  .company-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 3px;
    height: 100%;
    background-color: var(--border-color);
    transition: width 0.3s ease;
  }

  .company-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    border-color: var(--border-color);
  }

  .company-card:hover::before {
    width: 6px;
  }

  .company-card-content {
    padding: 1rem;
  }

  .company-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.75rem;
  }

  .company-card h3 {
    margin: 0;
    color: var(--text);
    font-size: 1.1rem;
    font-weight: 500;
  }

  .company-card time {
    display: inline-block;
    background-color: #800020;
    color: white;
    padding: 0.25rem 0.5rem;
    border-radius: 12px;
    font-size: 0.75rem;
    white-space: nowrap;
  }

  .company-indicator {
    display: flex;
    align-items: center;
    gap: 0.375rem;
    color: var(--secondary);
    font-size: 0.875rem;
    transition: color 0.3s ease;
  }

  .company-indicator i {
    font-size: 1rem;
  }

  .company-card:hover .company-indicator {
    color: var(--primary);
  }

  /* Modal styles */
  .modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    z-index: 1000;
    justify-content: center;
    align-items: center;
  }

  .modal.active {
    display: flex;
  }

  .modal-content {
    background: var(--card-bg, #ffffff);
    border-radius: 12px;
    width: 90%;
    max-width: 800px;
    max-height: 90vh;
    overflow-y: auto;
    position: relative;
    padding: 32px;
  }

  .close-modal {
    position: absolute;
    top: 16px;
    right: 16px;
    background: none;
    border: none;
    font-size: 24px;
    cursor: pointer;
    color: var(--text);
  }

  .modal-header {
    margin-bottom: 24px;
    padding-bottom: 16px;
    border-bottom: 1px solid var(--border-color);
  }

  .modal-header h2 {
    margin: 0 0 8px 0;
    color: var(--text);
  }

  .company-period {
    color: var(--secondary);
    font-size: 0.9rem;
  }

  .experiences-list {
    display: flex;
    flex-direction: column;
    gap: 24px;
  }

  .experience-item {
    padding: 16px;
    background: var(--bg-secondary);
    border-radius: 8px;
  }

  .experience-item h3 {
    margin: 0 0 8px 0;
    color: var(--text);
  }

  .experience-item time {
    display: inline-block;
    background-color: #800020;
    color: white;
    padding: 4px 12px;
    border-radius: 20px;
    font-size: 0.9rem;
    margin-bottom: 12px;
  }

  .experience-item p {
    margin: 0 0 12px 0;
    color: var(--secondary);
  }

  .highlights {
    list-style: disc;
    padding-left: 20px;
    margin: 0;
  }

  .highlights li {
    color: var(--secondary);
    margin-bottom: 4px;
  }

  @media (max-width: 768px) {
    .companies-grid {
      grid-template-columns: 1fr;
    }

    .modal-content {
      width: 95%;
      padding: 24px;
    }

    .company-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 8px;
    }

    .company-card time {
      align-self: flex-start;
    }
  }
</style>

<script type="module" define:vars={{ groupedWorkJson }}>
  import { initAccordions } from "/src/scripts/accordion";
  
  // Convertir el JSON de vuelta a objeto
  const groupedWork = JSON.parse(groupedWorkJson);

  document.addEventListener('DOMContentLoaded', () => {
    // Inicializar el acordeón
    initAccordions();

    // Modal functionality
    const modalTemplate = document.getElementById('company-modal-template');
    let currentModal = null;

    function createModal(company, experiences) {
      const modal = modalTemplate.content.cloneNode(true);
      const modalElement = modal.querySelector('.modal');
      const closeBtn = modal.querySelector('.close-modal');
      const companyName = modal.querySelector('.company-name');
      const companyPeriod = modal.querySelector('.company-period');
      const experiencesList = modal.querySelector('.experiences-list');

      // Set company name
      companyName.textContent = company;

      // Set company period
      const firstExperience = experiences[0];
      const lastExperience = experiences[experiences.length - 1];
      const startYear = new Date(firstExperience.startDate).getFullYear();
      const endYear = lastExperience.endDate 
        ? new Date(lastExperience.endDate).getFullYear() 
        : "Actual";
      companyPeriod.textContent = `${startYear} - ${endYear}`;

      // Add experiences
      experiences.forEach(exp => {
        const expElement = document.createElement('div');
        expElement.className = 'experience-item';
        
        const startYear = new Date(exp.startDate).getFullYear();
        const endYear = exp.endDate 
          ? new Date(exp.endDate).getFullYear() 
          : "Actual";

        expElement.innerHTML = `
          <h3>${exp.position}</h3>
          <time>${startYear} - ${endYear}</time>
          <p>${exp.summary}</p>
          <ul class="highlights">
            ${exp.highlights.map(h => `<li>${h}</li>`).join('')}
          </ul>
        `;

        experiencesList.appendChild(expElement);
      });

      // Add event listeners
      closeBtn.addEventListener('click', () => {
        modalElement.classList.remove('active');
        setTimeout(() => {
          modalElement.remove();
          currentModal = null;
        }, 300);
      });

      modalElement.addEventListener('click', (e) => {
        if (e.target === modalElement) {
          closeBtn.click();
        }
      });

      document.body.appendChild(modalElement);
      currentModal = modalElement;
      setTimeout(() => modalElement.classList.add('active'), 10);
    }

    // Add click handlers to company cards
    document.querySelectorAll('.company-card').forEach(card => {
      card.addEventListener('click', () => {
        const company = card.getAttribute('data-company');
        if (company && groupedWork[company]) {
          createModal(company, groupedWork[company]);
        }
      });
    });
  });
</script>

<script>
  const groupedWorkData = document.getElementById('groupedWorkData')?.textContent;
  if (!groupedWorkData) return;

  const groupedWork = JSON.parse(groupedWorkData);
  const modal = document.getElementById('experienceModal');
  const modalContent = document.getElementById('modalContent');
  const closeModal = document.getElementById('closeModal');
  const modalTitle = document.getElementById('modalTitle');
  const modalPeriod = document.getElementById('modalPeriod');
  const modalExperiences = document.getElementById('modalExperiences');

  if (!modal || !modalContent || !closeModal || !modalTitle || !modalPeriod || !modalExperiences) return;

  const companyCards = document.querySelectorAll('.company-card');
  companyCards.forEach(card => {
    const companyName = card.getAttribute('data-company');
    if (!companyName || !groupedWork[companyName]) return;

    card.addEventListener('click', () => {
      const company = groupedWork[companyName];
      modalTitle.textContent = company.name;
      modalPeriod.textContent = company.period;
      modalExperiences.innerHTML = '';

      company.experiences.forEach((exp: { title: string; description: string; tags: string[] }) => {
        const expElement = document.createElement('div');
        expElement.className = 'modal-experience';
        expElement.innerHTML = `
          <h3>${exp.title}</h3>
          <p>${exp.description}</p>
          <div class="modal-tags">
            ${exp.tags.map((tag: string) => `<span>${tag}</span>`).join('')}
          </div>
        `;
        modalExperiences.appendChild(expElement);
      });

      modal.classList.add('active');
    });
  });

  closeModal.addEventListener('click', () => {
    modal.classList.remove('active');
  });

  modal.addEventListener('click', (e) => {
    if (e.target === modal) {
      modal.classList.remove('active');
    }
  });
</script>
