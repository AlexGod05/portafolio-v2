---
import Section from "../Section.astro"
import Modal from "../Modal.astro"
import { getCVData } from "@cv"

const cvData = await getCVData()
const { work } = cvData

// Agrupar experiencias por empresa
const groupedWork = work.reduce((acc, experience) => {
  const companyName = experience.name.split(' - ')[0]
  if (!acc[companyName]) {
    acc[companyName] = []
  }
  acc[companyName].push(experience)
  return acc
}, {} as Record<string, typeof work>)

// Convertir groupedWork a JSON para el script
const groupedWorkJson = JSON.stringify(groupedWork)
---

<Section>
  <div class="accordion-container">
    <button class="accordion-header" aria-expanded="false">
      <h2><i class="fas fa-briefcase"></i> Experiencia laboral</h2>
      <span class="accordion-icon">▼</span>
    </button>

    <div class="accordion-content" aria-hidden="true">
      <div class="companies-grid">
        {
          Object.entries(groupedWork).map(([company, experiences]) => {
            const firstExperience = experiences[0]
            const lastExperience = experiences[experiences.length - 1]
            const startYear = new Date(firstExperience.startDate).getFullYear()
            const endYear = lastExperience.endDate 
              ? new Date(lastExperience.endDate).getFullYear() 
              : "Actual"
            const years = `${startYear} - ${endYear}`

            return (
              <div class="company-card" data-company={company}>
                <div class="company-card-content">
                  <div class="company-header">
                    <h3>{company}</h3>
                    <time>{years}</time>
                  </div>
                  <div class="company-indicator">
                    <i class="fas fa-info-circle"></i>
                    <span>Ver experiencia</span>
                  </div>
                </div>
              </div>
            )
          })
        }
      </div>
    </div>
  </div>
</Section>

<Modal id="experience-modal" title="Experiencia Laboral">
  <div class="modal-content"></div>
</Modal>

<style>
  .accordion-container {
    width: 100%;
  }

  .companies-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 1rem;
    padding: 1rem;
  }

  .company-card {
    background: var(--card-bg, #ffffff);
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
    cursor: pointer;
    border: 1px solid var(--border);
    position: relative;
    overflow: hidden;
  }

  .company-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    border-color: var(--border-color);
  }

  .company-card-content {
    padding: 1rem;
  }

  .company-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.75rem;
  }

  .company-card h3 {
    margin: 0;
    color: var(--text);
    font-size: 1.1rem;
    font-weight: 500;
  }

  .company-card time {
    display: inline-block;
    background-color: #800020;
    color: white;
    padding: 0.25rem 0.5rem;
    border-radius: 12px;
    font-size: 0.75rem;
    white-space: nowrap;
  }

  .company-indicator {
    display: flex;
    align-items: center;
    gap: 0.375rem;
    color: var(--secondary);
    font-size: 0.875rem;
    transition: color 0.3s ease;
  }

  .company-indicator i {
    font-size: 1rem;
  }

  .company-card:hover .company-indicator {
    color: var(--primary);
  }

  @media (max-width: 768px) {
    .companies-grid {
      grid-template-columns: 1fr;
    }
  }
</style>

<script type="module" define:vars={{ groupedWork }}>
  import { initAccordions } from "/src/scripts/accordion";
  
  document.addEventListener('DOMContentLoaded', () => {
    // Inicializar el acordeón
    initAccordions();

    // Add click handlers to company cards
    document.querySelectorAll('.company-card').forEach(card => {
      card.addEventListener('click', () => {
        const company = card.getAttribute('data-company');
        if (!company || !groupedWork[company]) return;

        const modal = document.getElementById('experience-modal');
        if (!modal) return;

        const modalContent = modal.querySelector('.modal-content');
        if (!modalContent) return;

        // Actualizar título
        const modalTitle = modal.querySelector('.modal-header h2');
        if (modalTitle) modalTitle.textContent = company;

        // Crear el contenido de la modal con tarjetas
        const experienceCards = groupedWork[company].map(exp => {
          const startYear = new Date(exp.startDate).getFullYear();
          const endYear = exp.endDate 
            ? new Date(exp.endDate).getFullYear() 
            : "Actual";

          return `
            <div class="experience-card">
              <div class="card-header">
                <div class="position-info">
                  <h3>${exp.position}</h3>
                  <time>${startYear} - ${endYear}</time>
                </div>
              </div>
              <div class="card-content">
                <div class="summary-card">
                  <h4>Descripción del Rol</h4>
                  <p>${exp.summary}</p>
                </div>
                <div class="highlights-card">
                  <h4>Logros y Responsabilidades</h4>
                  <ul>
                    ${exp.highlights.map(highlight => `
                      <li>
                        <span class="bullet">•</span>
                        <span>${highlight}</span>
                      </li>
                    `).join('')}
                  </ul>
                </div>
              </div>
            </div>
          `;
        }).join('');

        // Actualizar el contenido de la modal
        modalContent.innerHTML = `
          <div class="modal-controls">
            <button class="close-button" aria-label="Cerrar modal">
              <i class="fas fa-times"></i>
            </button>
          </div>
          <div class="company-title">
            <h2>${company}</h2>
          </div>
          <div class="experiences-grid">
            ${experienceCards}
          </div>
          <div class="modal-footer">
            <button class="close-modal-button">
              <i class="fas fa-times"></i>
              Cerrar
            </button>
          </div>
        `;

        // Añadir estilos para las tarjetas
        const style = document.createElement('style');
        style.textContent = `
          .modal-controls {
            position: absolute;
            top: 1rem;
            right: 1rem;
            z-index: 1;
          }

          .close-button {
            background: none;
            border: none;
            cursor: pointer;
            width: 2.5rem;
            height: 2.5rem;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            transition: all 0.2s ease;
            color: var(--text-color);
          }

          .close-button:hover {
            background: var(--bg-secondary);
            transform: rotate(90deg);
          }

          .close-button i {
            font-size: 1.25rem;
          }

          .modal-footer {
            display: flex;
            justify-content: center;
            margin-top: 2rem;
            padding-top: 1rem;
            border-top: 2px solid #800020;
          }

          .close-modal-button {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.75rem 1.5rem;
            background: #800020;
            color: white;
            border: none;
            border-radius: 2rem;
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
          }

          .close-modal-button:hover {
            background: #600018;
            transform: translateY(-2px);
          }

          .close-modal-button i {
            font-size: 1rem;
          }

          .company-title {
            text-align: center;
            margin-bottom: 2rem;
            padding-bottom: 1rem;
            border-bottom: 2px solid #800020;
          }

          .company-title h2 {
            color: var(--text-color);
            font-size: 2rem;
            font-weight: 600;
            margin: 0;
          }

          .experiences-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 1.5rem;
            padding: 1rem;
          }

          .experience-card {
            background: var(--card-bg);
            border-radius: 16px;
            border: none;
            overflow: hidden;
            transition: all 0.3s ease;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
            position: relative;
          }

          .experience-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.12);
          }

          .experience-card:not(:last-child)::after {
            content: '';
            position: absolute;
            bottom: -1rem;
            left: 50%;
            transform: translateX(-50%);
            width: 50px;
            height: 3px;
            background: #800020;
            border-radius: 3px;
          }

          .card-header {
            background: var(--bg-secondary);
            padding: 1.5rem;
            border-bottom: none;
          }

          .position-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: 1rem;
          }

          .position-info h3 {
            color: var(--text-color);
            font-size: 1.25rem;
            font-weight: 600;
            margin: 0;
          }

          .position-info time {
            display: inline-block;
            color: white;
            font-size: 0.875rem;
            font-weight: 500;
            padding: 0.25rem 0.75rem;
            background: #800020;
            border: none;
            border-radius: 1rem;
          }

          .card-content {
            padding: 1.5rem;
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
          }

          .summary-card,
          .highlights-card {
            background: var(--bg-secondary);
            border-radius: 12px;
            padding: 1.25rem;
            border: none;
            box-shadow: 0 1px 4px rgba(0, 0, 0, 0.05);
          }

          .summary-card::after {
            content: '';
            position: absolute;
            bottom: -0.5rem;
            left: 0;
            width: 100%;
            height: 2px;
            background: #800020;
            opacity: 0.3;
          }

          .summary-card h4,
          .highlights-card h4 {
            color: var(--text-color);
            font-size: 1.1rem;
            font-weight: 600;
            margin: 0 0 1rem 0;
          }

          .summary-card p {
            color: var(--text-secondary);
            font-size: 1rem;
            line-height: 1.6;
            margin: 0;
          }

          .highlights-card ul {
            list-style: none;
            padding: 0;
            margin: 0;
            display: flex;
            flex-direction: column;
            gap: 0.75rem;
          }

          .highlights-card li {
            display: flex;
            gap: 0.75rem;
            color: var(--text-color);
            font-size: 0.95rem;
            line-height: 1.5;
          }

          .bullet {
            color: var(--primary);
            font-size: 1.25rem;
            line-height: 1;
          }

          @media (max-width: 768px) {
            .experiences-grid {
              grid-template-columns: 1fr;
            }

            .card-header {
              padding: 1.25rem;
            }

            .position-info {
              flex-direction: column;
              align-items: flex-start;
              gap: 0.5rem;
            }

            .card-content {
              padding: 1.25rem;
              gap: 1rem;
            }

            .summary-card,
            .highlights-card {
              padding: 1rem;
            }
          }
        `;

        // Añadir los estilos al documento
        document.head.appendChild(style);

        // Agregar event listeners para los botones de cierre
        const closeButtons = modalContent.querySelectorAll('.close-button, .close-modal-button');
        closeButtons.forEach(button => {
          button.addEventListener('click', () => {
            if (typeof modal.closeModal === 'function') {
              modal.closeModal();
            } else {
              modal.classList.remove('active');
              document.body.style.overflow = '';
            }
          });
        });

        // Abrir la modal
        if (typeof modal.openModal === 'function') {
          modal.openModal();
        } else {
          modal.classList.add('active');
          document.body.style.overflow = 'hidden';
        }
      });
    });
  });
</script>
